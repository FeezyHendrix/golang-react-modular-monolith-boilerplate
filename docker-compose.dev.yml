version: "3.9"

services:
  # Go Backend Server
  server:
    container_name: echo-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.server
    ports:
      - "8080:8080"
      - "2345:2345"  # Delve debugger port
    environment:
      - PORT=8080
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=echoboilerplate_dev
      - POSTGRES_SSL_MODE=disable
      - AUTHENTICATION_JWT_SECRET=dev_jwt_secret_key_32_characters_min
      - AUTHENTICATION__PASSWORD_RESET_TOKEN_ENCRYPTION_KEY=dev_password_reset_key_32_chars_here
      - USERS__INVITE_ENCRYPTION_KEY=dev_user_invite_key_32_chars_here
    volumes:
      - .:/app
      - /app/spa/build
    networks:
      - app-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (SPA)
  spa:
    container_name: echo-spa
    build:
      context: ./spa
      dockerfile: ../Dockerfile.spa
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./spa:/spa
      - /spa/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: echo-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=echoboilerplate_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d echoboilerplate_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional - for caching, sessions, etc.)
  redis:
    image: redis:7-alpine
    container_name: echo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
