version: "3.9"

services:
  server:
    container_name: echo-template-server
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.server
    entrypoint: "air -c .air.toml"
    ports:
      - "8080:8080"
      - "2345:2345"  
    env_file:
      - ./env/server.env
    volumes:
      - .:/app
      - /app/spa/build
    networks:
      - app-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  spa:
    container_name: echo-template-spa
    build:
      context: ./spa
      dockerfile: Dockerfile.spa
    ports:
      - "3000:3000"
    env_file:
      - ./env/spa.env
    volumes:
      - ./spa:/spa
      - /spa/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: echo-template-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=echoboilerplate_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d echoboilerplate_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: echo-template-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
